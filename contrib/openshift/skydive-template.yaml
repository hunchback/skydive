apiVersion: v1
kind: Template
metadata:
  name: skydive
objects:
# Skydive Analyzer (Deployment)
#
# Containers included in this pod::
# (1) Skydive Analyzer - main skydive server component
# (2) Skydive UI - new skydive UI
# (3) ElasticSearch - persistent storage for skydive
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: skydive-analyzer
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: skydive
        tier: analyzer
    template:
      metadata:
        labels:
          app: skydive
          tier: analyzer
      spec:
        containers:
        - image: skydive/skydive
          imagePullPolicy: Always
          name: skydive-analyzer
          args:
          - analyzer
          - --listen=0.0.0.0:8082
          env:
          - name: SKYDIVE_ANALYZER_FLOW_BACKEND
            value: elasticsearch
          - name: SKYDIVE_ANALYZER_TOPOLOGY_BACKEND
            value: elasticsearch
          - name: SKYDIVE_ANALYZER_TOPOLOGY_PROBES
            value: "k8s ovn"
          - name: SKYDIVE_ANALYZER_TOPOLOGY_K8S_PROBES
            value: "cluster namespace node pod container service deployment"
          - name: SKYDIVE_UI
            value: '{"theme":"light","k8s_enabled":"true","topology": {"favorites":{"infrastructure":"G.V().Has(\"Manager\", Without(\"k8s\"))","kubernetes":"G.V().Has(\"Manager\",\"k8s\")"},"default_filter":"infrastructure"}}'
          - name: SKYDIVE_ANALYZER_TOPOLOGY_FABRIC
            value: 'TOR1->*[Type=host]/eth0 TOR1->*[Type=host]/eth1 TOR1->*[Type=host]/ens1 TOR1->*[Type=host]/ens2 TOR1->*[Type=host]/ens3'
          - name: SKYDIVE_ANALYZER_STARTUP_CAPTURE_GREMLIN
            value: 'G.V().Has("Type" , "device", "Name", Regex("eth0|ens1|ens2|ens3"))'
          - name: SKYDIVE_ETCD_LISTEN
            value: 0.0.0.0:12379
          - name: SKYDIVE_LOGGING_LEVEL
            value: ${SKYDIVE_LOGGING_LEVEL}
          ports:
          - containerPort: 8082
            protocol: TCP
          - containerPort: 8082
            protocol: UDP
          - containerPort: 12379
            protocol: TCP
          - containerPort: 12380
            protocol: TCP
          livenessProbe:
            failureThreshold: 3
            tcpSocket:
              port: 8082
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 1
            tcpSocket:
              port: 8082
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
        - image: skydive/skydive-ui
          name: skydive-ui
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
            protocol: TCP
        - image: elasticsearch:7.10.1
          name: skydive-elasticsearch
          imagePullPolicy: IfNotPresent
          env:
          - name: discovery.type
            value: single-node
          ports:
          - containerPort: 9200
            protocol: TCP
          - containerPort: 9300
            protocol: TCP
          livenessProbe:
            failureThreshold: 3
            tcpSocket:
              port: 9200
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 1
            tcpSocket:
              port: 9200
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            privileged: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
# Skydive Agents  (DaemonSet)
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    labels:
      app: skydive
      tier: agent
    name: skydive-agent
  spec:
    selector:
      matchLabels:
        app: skydive
        tier: agent
    template:
      metadata:
        labels:
          app: skydive
          tier: agent
      spec:
        containers:
        - args:
          - agent
          env:
          - name: SKYDIVE_ANALYZERS
            value: $(SKYDIVE_ANALYZER_SERVICE_HOST):$(SKYDIVE_ANALYZER_SERVICE_PORT_API)
          - name: SKYDIVE_LOGGING_LEVEL
            value: ${SKYDIVE_LOGGING_LEVEL}
          - name: SKYDIVE_AGENT_TOPOLOGY_PROBES
            value: "netlink netns ovsdb runc"
          - name: SKYDIVE_AGENT_TOPOLOGY_RUNC_RUN_PATH
            value: "/run/containerd/runc /run/runc /run/runc-ctrs"
          image: skydive/skydive
          imagePullPolicy: Always
          name: skydive-agent
          ports:
          - containerPort: 8081
            hostPort: 8081
            protocol: TCP
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /run/docker.sock
            name: docker
          - mountPath: /run/netns
            name: netns
          - mountPath: /run/openvswitch/db.sock
            name: ovsdb
          - mountPath: /run/runc
            name: runc
          - mountPath: /run/runc-ctrs
            name: runc-ctrs
          - mountPath: /run/containerd/runc
            name: containerd-runc
          - mountPath: /var/data/openshiftvolumes
            name: data-openshiftvolumes
          - mountPath: /var/lib/origin
            name: lib-origin
        dnsPolicy: ClusterFirst
        hostNetwork: true
        hostPID: true
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /run/docker.sock
          name: docker
        - hostPath:
            path: /run/netns
          name: netns
        - hostPath:
            path: /run/runc
          name: runc
        - hostPath:
            path: /run/runc-ctrs
          name: runc-ctrs
        - hostPath:
            path: /run/containerd/runc
          name: containerd-runc
        - hostPath:
            path: /run/openvswitch/db.sock
          name: ovsdb
        - hostPath:
            path: /var/data/openshiftvolumes
          name: data-openshiftvolumes
        - hostPath:
            path: /var/lib/origin
          name: lib-origin
# Service for Skydive Analyzer
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: skydive-analyzer
    name: skydive-analyzer
  spec:
    ports:
      - name: api
        port: 8082
        protocol: TCP
        targetPort: 8082
      - name: protobuf
        port: 8082
        protocol: UDP
        targetPort: 8082
      - name: etcd
        port: 12379
        protocol: TCP
        targetPort: 12379
      - name: etcd-cluster
        port: 12380
        protocol: TCP
        targetPort: 12380
      - name: es
        port: 9200
        protocol: TCP
        targetPort: 9200
    selector:
      app: skydive
      tier: analyzer
    sessionAffinity: None
    type: NodePort
# Route for Skydive Analyzer
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: skydive-analyzer
    name: skydive-analyzer
  spec:
    port:
      targetPort: api
    to:
      kind: Service
      name: skydive-analyzer
      weight: 100
    wildcardPolicy: None
# Service for Skydive UI
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: skydive-analyzer
    name: skydive-ui
  spec:
    ports:
      - name: ui
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app: skydive
      tier: analyzer
    sessionAffinity: None
    type: NodePort
# Route for Skydive UI
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: skydive-analyzer
    name: skydive-ui
  spec:
    port:
      targetPort: ui
    to:
      kind: Service
      name: skydive-ui
      weight: 100
    wildcardPolicy: None
# Parameters
parameters:
- description: Loglevel of Skydive agent and analyzer
  displayName: Loglevel
  name: SKYDIVE_LOGGING_LEVEL
  required: true
  value: INFO
